{"ast":null,"code":"var _jsxFileName = \"/home/mitesh.sathvara/Project/upskill-fest/src/hook/useCustomHook.js\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserData = [{\n  id: 1,\n  name: \"Mitesh\",\n  email: \"mitesh@gmail.com\",\n  status: \"active\"\n}, {\n  id: 2,\n  name: \"Jack\",\n  email: \"jack@gmail.com\",\n  status: \"active\"\n}, {\n  id: 3,\n  name: \"Ali\",\n  email: \"Ali@gmail.com\",\n  status: \"inactive\"\n}, {\n  id: 4,\n  name: \"Neel\",\n  email: \"neel@gmail.com\",\n  status: \"inactive\"\n}, {\n  id: 5,\n  name: \"Jonny\",\n  email: \"Jonny@gmail.com\",\n  status: \"active\"\n}];\n\nfunction ChatRecipientPicker() {\n  _s();\n\n  const [recipientID, setRecipientID] = useState(1);\n  const isRecipientOnline = useFriendStatus(recipientID);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Circle, {\n      color: isRecipientOnline ? \"green\" : \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      value: recipientID,\n      onChange: e => setRecipientID(Number(e.target.value)),\n      children: UserData.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: user.id,\n        children: user.name\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ChatRecipientPicker, \"d9oS0gWh819Fb0A9UQCGtAqP/Dg=\", true);\n\n_c = ChatRecipientPicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRecipientPicker\");","map":{"version":3,"sources":["/home/mitesh.sathvara/Project/upskill-fest/src/hook/useCustomHook.js"],"names":["UserData","id","name","email","status","ChatRecipientPicker","recipientID","setRecipientID","useState","isRecipientOnline","useFriendStatus","e","Number","target","value","map","user"],"mappings":";;;;;AAAA,MAAMA,QAAQ,GAAG,CACf;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,KAAK,EAAE,kBAHT;AAIEC,EAAAA,MAAM,EAAE;AAJV,CADe,EAOf;AACEH,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,KAAK,EAAE,gBAHT;AAIEC,EAAAA,MAAM,EAAE;AAJV,CAPe,EAaf;AACEH,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,KAFR;AAGEC,EAAAA,KAAK,EAAE,eAHT;AAIEC,EAAAA,MAAM,EAAE;AAJV,CAbe,EAmBf;AACEH,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,KAAK,EAAE,gBAHT;AAIEC,EAAAA,MAAM,EAAE;AAJV,CAnBe,EAyBf;AACEH,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,KAAK,EAAE,iBAHT;AAIEC,EAAAA,MAAM,EAAE;AAJV,CAzBe,CAAjB;;AAiCA,SAASC,mBAAT,GAA+B;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCC,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMC,iBAAiB,GAAGC,eAAe,CAACJ,WAAD,CAAzC;AACA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEG,iBAAiB,GAAG,OAAH,GAAa;AAA7C;AAAA;AAAA;AAAA;AAAA,YADF,EACyD,GADzD,eAEE;AACE,MAAA,KAAK,EAAEH,WADT;AAEE,MAAA,QAAQ,EAAGK,CAAD,IAAOJ,cAAc,CAACK,MAAM,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAP,CAFjC;AAAA,gBAIGd,QAAQ,CAACe,GAAT,CAAcC,IAAD,iBACZ;AAAsB,QAAA,KAAK,EAAEA,IAAI,CAACf,EAAlC;AAAA,kBACGe,IAAI,CAACd;AADR,SAAac,IAAI,CAACf,EAAlB;AAAA;AAAA;AAAA;AAAA,cADD;AAJH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAeD;;GAlBQI,mB;;KAAAA,mB","sourcesContent":["const UserData = [\n  {\n    id: 1,\n    name: \"Mitesh\",\n    email: \"mitesh@gmail.com\",\n    status: \"active\",\n  },\n  {\n    id: 2,\n    name: \"Jack\",\n    email: \"jack@gmail.com\",\n    status: \"active\",\n  },\n  {\n    id: 3,\n    name: \"Ali\",\n    email: \"Ali@gmail.com\",\n    status: \"inactive\",\n  },\n  {\n    id: 4,\n    name: \"Neel\",\n    email: \"neel@gmail.com\",\n    status: \"inactive\",\n  },\n  {\n    id: 5,\n    name: \"Jonny\",\n    email: \"Jonny@gmail.com\",\n    status: \"active\",\n  },\n];\n\nfunction ChatRecipientPicker() {\n  const [recipientID, setRecipientID] = useState(1);\n  const isRecipientOnline = useFriendStatus(recipientID);\n  return (\n    <>\n      <Circle color={isRecipientOnline ? \"green\" : \"red\"} />{\" \"}\n      <select\n        value={recipientID}\n        onChange={(e) => setRecipientID(Number(e.target.value))}\n      >\n        {UserData.map((user) => (\n          <option key={user.id} value={user.id}>\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}